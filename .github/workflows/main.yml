---
name: CI

on:
  push:
    branches: ["master"]
    tags:
      - "*"
  pull_request:
    branches: ["master"]

jobs:
  tests:
    name: "${{ matrix.os }}: Python ${{ matrix.python-version }}"
    strategy:
      matrix:
        python-version: ["3.6", "3.7", "3.8", "3.9"]
        os: ["ubuntu-20.04", "macos-latest"]

    runs-on: "${{ matrix.os }}"

    env:
      PYTHONFAULTHANDLER: "true"

    steps:
      - uses: "actions/checkout@v2"
        with:
          # We need tags to get the correct code version:
          fetch-depth: 0
      - uses: "actions/setup-python@v2"
        with:
          python-version: "${{ matrix.python-version }}"
      - uses: "actions-rs/toolchain@v1"
        with:
          toolchain: stable
      - name: "Install gfortran"
        if: contains(matrix.os, 'ubuntu')
        run: |
            sudo apt-get update
            sudo apt-get install -y gfortran
      - name: Install gfortran 2
        if: contains(matrix.os, 'macos')
        run: |
          set -euo pipefail
          brew install gcc@9 || true
          gfortran --version || sudo ln -s /usr/local/bin/gfortran-9 /usr/local/bin/gfortran
          gfortran --version
      - name: "Install dependencies and code"
        run: |
          set -euo pipefail
          make venv
          . venv/bin/activate
          make
          pip install -e .[dev]
      - name: "Run tests"
        run: |
          set -euo pipefail
          . venv/bin/activate
          make test
      - name: "Build wheel"
        if: startsWith(matrix.os, 'mac')
        run: |
            set -euo pipefail
            . venv/bin/activate
            make wheel
      - name: "Build manylinux wheel"
        if: startsWith(matrix.os, 'ubuntu') && (matrix.python-version == '3.8')
        run: |
            set -euo pipefail
            . venv/bin/activate
            make manylinux-wheel
            # Test wheel
            deactivate
            python3.8 -m venv venv2
            . venv2/bin/activate
            pip install -r requirements-dev.txt
            pip install dist/*38*manylinux*.whl
            mv filprofiler filprofiler.disabled
            make test-python-no-deps
      - uses: actions/upload-artifact@v2
        with:
          name: "${{ matrix.os }}-${{ matrix.python-version }}-wheel"
          path: dist/*.whl
      # - name: Publish distribution ðŸ“¦ to Test PyPI
      #   if: (startsWith(matrix.os, 'ubuntu') && (matrix.python-version == '3.8')) || startsWith(matrix.os, 'mac')
      #   env:
      #     TWINE_USERNAME: __token__
      #     TWINE_PASSWORD: ${{ secrets.TEST_PYPI_TOKEN }}
      #   run: |
      #       set -euo pipefail
      #       . venv/bin/activate
      #       twine check dist/*.whl
      #       twine upload --repository testpypi dist/*.whl
      - name: Publish distribution ðŸ“¦ to PyPI
        if: startsWith(github.event.ref, 'refs/tags') && ((startsWith(matrix.os, 'ubuntu') && (matrix.python-version == '3.8')) || startsWith(matrix.os, 'mac'))
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
            set -euo pipefail
            . venv/bin/activate
            twine check dist/*.whl
            twine upload --repository pypi dist/*.whl
